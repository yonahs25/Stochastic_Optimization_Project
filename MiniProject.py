# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UbI51lzyj5WNDS17Fq61_SsJrQdlwy0Y
"""

import math
import string

import numpy as np
import openpyxl

global counter


# set the number of points to generate
def calculate_distance(x1, y1, x2, y2):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist


def his(arr):
    n = len(arr)

    # Declare the numpy array for LIS and initialize LIS values for all indexes
    his = np.array(arr[:, 2].copy())

    x_y_arr = np.array([[point[0], point[1]] for point in arr])
    # Compute optimized LIS values in bottom up manner
    for i in range(1, n):
        # Create boolean mask of elements in arr that satisfy the condition
        mask = (x_y_arr[:i, 1] < x_y_arr[i, 1]) & (x_y_arr[:i, 0] < x_y_arr[i, 0])
        
        # Compute LIS values for selected elements
        lis_values = np.where(mask, his[:i] + arr[i][2], arr[i][2])
        
        # Compute maximum LIS value for selected elements
        max_lis = np.max(lis_values)
        
        # Update LIS value for current element
        his[i] = max_lis
        
    # Return maximum LIS value
    return np.max(his)


def restore_all_points_in_range(points_sorted, start, end):
    global counter
    for point in points_sorted:
        if point[3] < start:
            continue
        if point[3] < end:
            point[2] = 1
            counter -= 1
            continue
        break
    return points_sorted


def update_all_points_in_range(points_sorted, start, end):
    global counter
    for point in points_sorted:
        if point[3] < start:
            continue
        if point[3] < end:
            point[2] = 2
            counter += 1
            continue
        break
    return points_sorted


def check_points_one_by_one(points_sorted, start, end, heavy):
    global counter
    _indices = np.lexsort((points_sorted[:, 1], points_sorted[:, 0]))
    sorted_by_x_y_ = points_sorted[_indices]
    for point in sorted_by_x_y_:
        if start < point[3] < end:
            point[2] = 2
            new_heavy = his(sorted_by_x_y_)
            if new_heavy != heavy:
                point[2] = 1
            else:
                counter += 1

    return sorted_by_x_y_[sorted_by_x_y_[:, 3].argsort()]


if __name__ == '__main__':
    global counter
    counter = 0
    distance_interval = 0.02
    points_list = []

    workbook = openpyxl.load_workbook(r"/content/data.xlsx")
    sheet_name = 'rhombus_1000_samples'
    sheet = workbook[sheet_name]
    first = True
    for row in sheet.iter_rows():
        if first:
            first = False
            continue
        x = row[0].value
        y = row[1].value
        w = 1
        if 'square' in sheet_name:
            d = min(calculate_distance(x, y, 0.5, 1), calculate_distance(x, y, 0.5, 0))
        else:
            d = 0.5 - calculate_distance(x, y, 0.5, 0.5)
        points_list.append([x, y, w, d])

    points = np.array(points_list)
    # sort by x and then by y
    indices = np.lexsort((points[:, 1], points[:, 0]))
    sorted_by_x_y = points[indices]

    heaviest = his(sorted_by_x_y)
    print("start heaviest: {}".format(heaviest))
    sorted_points = points[points[:, 3].argsort()]

    distance = distance_interval
    while distance < 1:
        sorted_points = update_all_points_in_range(sorted_points, distance - distance_interval, distance)
        indices = np.lexsort((sorted_points[:, 1], sorted_points[:, 0]))
        sorted_by_x_y = sorted_points[indices]
        new_heaviest = his(sorted_by_x_y)
        if new_heaviest != heaviest:
            print("heaviest increased")

            sorted_points = restore_all_points_in_range(sorted_points, distance - distance_interval, distance)

            sorted_points = check_points_one_by_one(sorted_points, distance - distance_interval, distance, heaviest)
        else:
            print("accept all points in range")

        print("counter: {}".format(counter))

        distance += distance_interval

    indices = np.lexsort((sorted_points[:, 1], sorted_points[:, 0]))
    sorted_by_x_y = sorted_points[indices]
    curr_heaviest = his(sorted_by_x_y)
    print("points: {}".format(points))
    print("new points: {}".format(sorted_points))

    print("curr heaviest: {}, heaviest: {}, changed: {}".format(curr_heaviest, heaviest, counter))